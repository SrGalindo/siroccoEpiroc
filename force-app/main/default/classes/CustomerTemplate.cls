//
// Generated by CustomerTemplate http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class CustomerTemplate {

	public String sourceSystem {get;set;} 
	public String sourceTimestamp {get;set;} 
	public String cMrecordID {get;set;} 
	public String cMIbosEvent {get;set;} 
	public String cMfamCode {get;set;} 
	public Integer cMcustNo {get;set;} 
	public String cMname {get;set;} 
	public String cMaddr1 {get;set;} 
	public String cMaddr2 {get;set;} 
	public String cMaddr3 {get;set;} 
	public String cMstate {get;set;} 
	public String cMpostCode {get;set;} 
	public Double cMamountDue {get;set;} 
	public Double cMcreditLimit {get;set;} 
	public String cMcountry {get;set;} 
	public String cMcountryDesc {get;set;} 
	public String cMtype {get;set;} 
	public String cMtypeDesc {get;set;} 
	public Double cMOpenOrderAmt {get;set;} 
	public Double cMytdSalesAmt {get;set;} 
	public Double cMmtdSalesAmt {get;set;} 
	public Double cMlastYTDSalesAmt {get;set;} 
	public Double cMytdCostSales {get;set;} 
	public Double cMlastYTDCostSales {get;set;} 
	public Double cMmtdCostSales {get;set;} 
	public String cMphoneNo {get;set;} 
	public String cMsalesman {get;set;} 
	public String cMsalesmanName {get;set;} 
	public String cMterms {get;set;} 
	public String cMtermsDesc {get;set;} 
	public String cMlastTransDate {get;set;} 
	public String cMdiscCode {get;set;} 
	public String cMtaxCode {get;set;} 
	public String cMcommCode {get;set;} 
	public Integer cMshipTo {get;set;} 
	public String cMcostCtr {get;set;} 
	public Integer cMcorpCust {get;set;} 
	public Integer cMreg {get;set;} 
	public Integer cMshipVia {get;set;} 
	public String cMpayTypeCode {get;set;} 
	public String cMcontact {get;set;} 
	public String cMwhs {get;set;} 
	public String cMtaxID {get;set;} 
	public String cMdateAcctOpen {get;set;} 
	public String cmCurrency {get;set;} 
	public String cMabc {get;set;} 
	public String cMsic {get;set;} 
	public String cMdunNo {get;set;} 
	public String cMdunRank {get;set;} 
	public String cMfiscalTaxID {get;set;} 
	public String cMalphaLookup {get;set;} 
	public String cMrouteCode {get;set;} 
	public String cMdocPrefix {get;set;} 
	public String cMprno {get;set;} 
	public String cMtransCode {get;set;} 
	public String cMstopFlag {get;set;} 
	public Integer cMstopYTD {get;set;} 
	public Integer cMstopLYTD {get;set;} 
	public String cMintext {get;set;} 
	public Double cMytdRcv {get;set;} 
	public Double cMmtdRcv {get;set;} 
	public Double cMlytdRcv {get;set;} 
	public Double cMytdCostRcv {get;set;} 
	public Double cMlytdCostRcv {get;set;} 
	public Double cMmtdCostRcv {get;set;} 
	public String cMconsCode {get;set;} 
	public String cMFAMCountryCode {get;set;} 
	public String cMInterCompanyFlag {get;set;} 
	public String cmConsDesc {get;set;} 
	public String cMlangCode {get;set;} 
	public String cMpriceListCode {get;set;} 
	public String cMfaxNo {get;set;} 
	public String cMglblCustCode {get;set;} 
	public String cMglblIndCode {get;set;} 
	public String cMasapRepCode1 {get;set;} 
	public String cMasapRepCode2 {get;set;} 
	public String cMasapRepCode3 {get;set;} 
	public Integer cMdftNoDels {get;set;} 
	public String cMemail {get;set;} 
	public String cMbrandCode {get;set;} 
	public String cMspeedDelCode {get;set;} 
	public Integer cMserviceSalesman {get;set;} 
	public String cMserviceSalesName {get;set;} 
	public String cMnaicsCode {get;set;} 
	public String cMshopOnline {get;set;} 
	public String cMcashCred {get;set;} 
	public String cMcustFam {get;set;} 
	public String cMsalesforceID {get;set;} 
	public List<Notes> notes {get;set;} 
	public List<Ship_tos> ship_tos {get;set;} // in json: ship-tos

	public CustomerTemplate(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'sourceSystem') {
						sourceSystem = parser.getText();
					} else if (text == 'sourceTimestamp') {
						sourceTimestamp = parser.getText();
					} else if (text == 'cMrecordID') {
						cMrecordID = parser.getText();
					} else if (text == 'cMIbosEvent') {
						cMIbosEvent = parser.getText();
					} else if (text == 'cMfamCode') {
						cMfamCode = parser.getText();
					} else if (text == 'cMcustNo') {
						cMcustNo = parser.getIntegerValue();
					} else if (text == 'cMname') {
						cMname = parser.getText();
					} else if (text == 'cMaddr1') {
						cMaddr1 = parser.getText();
					} else if (text == 'cMaddr2') {
						cMaddr2 = parser.getText();
					} else if (text == 'cMaddr3') {
						cMaddr3 = parser.getText();
					} else if (text == 'cMstate') {
						cMstate = parser.getText();
					} else if (text == 'cMpostCode') {
						cMpostCode = parser.getText();
					} else if (text == 'cMamountDue') {
						cMamountDue = parser.getDoubleValue();
					} else if (text == 'cMcreditLimit') {
						cMcreditLimit = parser.getDoubleValue();
					} else if (text == 'cMcountry') {
						cMcountry = parser.getText();
					} else if (text == 'cMcountryDesc') {
						cMcountryDesc = parser.getText();
					} else if (text == 'cMtype') {
						cMtype = parser.getText();
					} else if (text == 'cMtypeDesc') {
						cMtypeDesc = parser.getText();
					} else if (text == 'cMOpenOrderAmt') {
						cMOpenOrderAmt = parser.getDoubleValue();
					} else if (text == 'cMytdSalesAmt') {
						cMytdSalesAmt = parser.getDoubleValue();
					} else if (text == 'cMmtdSalesAmt') {
						cMmtdSalesAmt = parser.getDoubleValue();
					} else if (text == 'cMlastYTDSalesAmt') {
						cMlastYTDSalesAmt = parser.getDoubleValue();
					} else if (text == 'cMytdCostSales') {
						cMytdCostSales = parser.getDoubleValue();
					} else if (text == 'cMlastYTDCostSales') {
						cMlastYTDCostSales = parser.getDoubleValue();
					} else if (text == 'cMmtdCostSales') {
						cMmtdCostSales = parser.getDoubleValue();
					} else if (text == 'cMphoneNo') {
						cMphoneNo = parser.getText();
					} else if (text == 'cMsalesman') {
						cMsalesman = parser.getText();
					} else if (text == 'cMsalesmanName') {
						cMsalesmanName = parser.getText();
					} else if (text == 'cMterms') {
						cMterms = parser.getText();
					} else if (text == 'cMtermsDesc') {
						cMtermsDesc = parser.getText();
					} else if (text == 'cMlastTransDate') {
						cMlastTransDate = parser.getText();
					} else if (text == 'cMdiscCode') {
						cMdiscCode = parser.getText();
					} else if (text == 'cMtaxCode') {
						cMtaxCode = parser.getText();
					} else if (text == 'cMcommCode') {
						cMcommCode = parser.getText();
					} else if (text == 'cMshipTo') {
						cMshipTo = parser.getIntegerValue();
					} else if (text == 'cMcostCtr') {
						cMcostCtr = parser.getText();
					} else if (text == 'cMcorpCust') {
						cMcorpCust = parser.getIntegerValue();
					} else if (text == 'cMreg') {
						cMreg = parser.getIntegerValue();
					} else if (text == 'cMshipVia') {
						cMshipVia = parser.getIntegerValue();
					} else if (text == 'cMpayTypeCode') {
						cMpayTypeCode = parser.getText();
					} else if (text == 'cMcontact') {
						cMcontact = parser.getText();
					} else if (text == 'cMwhs') {
						cMwhs = parser.getText();
					} else if (text == 'cMtaxID') {
						cMtaxID = parser.getText();
					} else if (text == 'cMdateAcctOpen') {
						cMdateAcctOpen = parser.getText();
					} else if (text == 'cmCurrency') {
						cmCurrency = parser.getText();
					} else if (text == 'cMabc') {
						cMabc = parser.getText();
					} else if (text == 'cMsic') {
						cMsic = parser.getText();
					} else if (text == 'cMdunNo') {
						cMdunNo = parser.getText();
					} else if (text == 'cMdunRank') {
						cMdunRank = parser.getText();
					} else if (text == 'cMfiscalTaxID') {
						cMfiscalTaxID = parser.getText();
					} else if (text == 'cMalphaLookup') {
						cMalphaLookup = parser.getText();
					} else if (text == 'cMrouteCode') {
						cMrouteCode = parser.getText();
					} else if (text == 'cMdocPrefix') {
						cMdocPrefix = parser.getText();
					} else if (text == 'cMprno') {
						cMprno = parser.getText();
					} else if (text == 'cMtransCode') {
						cMtransCode = parser.getText();
					} else if (text == 'cMstopFlag') {
						cMstopFlag = parser.getText();
					} else if (text == 'cMstopYTD') {
						cMstopYTD = parser.getIntegerValue();
					} else if (text == 'cMstopLYTD') {
						cMstopLYTD = parser.getIntegerValue();
					} else if (text == 'cMintext') {
						cMintext = parser.getText();
					} else if (text == 'cMytdRcv') {
						cMytdRcv = parser.getDoubleValue();
					} else if (text == 'cMmtdRcv') {
						cMmtdRcv = parser.getDoubleValue();
					} else if (text == 'cMlytdRcv') {
						cMlytdRcv = parser.getDoubleValue();
					} else if (text == 'cMytdCostRcv') {
						cMytdCostRcv = parser.getDoubleValue();
					} else if (text == 'cMlytdCostRcv') {
						cMlytdCostRcv = parser.getDoubleValue();
					} else if (text == 'cMmtdCostRcv') {
						cMmtdCostRcv = parser.getDoubleValue();
					} else if (text == 'cMconsCode') {
						cMconsCode = parser.getText();
					} else if (text == 'cMFAMCountryCode') {
						cMFAMCountryCode = parser.getText();
					} else if (text == 'cMInterCompanyFlag') {
						cMInterCompanyFlag = parser.getText();
					} else if (text == 'cmConsDesc') {
						cmConsDesc = parser.getText();
					} else if (text == 'cMlangCode') {
						cMlangCode = parser.getText();
					} else if (text == 'cMpriceListCode') {
						cMpriceListCode = parser.getText();
					} else if (text == 'cMfaxNo') {
						cMfaxNo = parser.getText();
					} else if (text == 'cMglblCustCode') {
						cMglblCustCode = parser.getText();
					} else if (text == 'cMglblIndCode') {
						cMglblIndCode = parser.getText();
					} else if (text == 'cMasapRepCode1') {
						cMasapRepCode1 = parser.getText();
					} else if (text == 'cMasapRepCode2') {
						cMasapRepCode2 = parser.getText();
					} else if (text == 'cMasapRepCode3') {
						cMasapRepCode3 = parser.getText();
					} else if (text == 'cMdftNoDels') {
						cMdftNoDels = parser.getIntegerValue();
					} else if (text == 'cMemail') {
						cMemail = parser.getText();
					} else if (text == 'cMbrandCode') {
						cMbrandCode = parser.getText();
					} else if (text == 'cMspeedDelCode') {
						cMspeedDelCode = parser.getText();
					} else if (text == 'cMserviceSalesman') {
						cMserviceSalesman = parser.getIntegerValue();
					} else if (text == 'cMserviceSalesName') {
						cMserviceSalesName = parser.getText();
					} else if (text == 'cMnaicsCode') {
						cMnaicsCode = parser.getText();
					} else if (text == 'cMshopOnline') {
						cMshopOnline = parser.getText();
					} else if (text == 'cMcashCred') {
						cMcashCred = parser.getText();
					} else if (text == 'cMcustFam') {
						cMcustFam = parser.getText();
					} else if (text == 'cMsalesforceID') {
						cMsalesforceID = parser.getText();
					} else if (text == 'notes') {
						notes = arrayOfNotes(parser);
					} else if (text == 'ship-tos') {
						ship_tos = arrayOfShip_tos(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'CustomerTemplate consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	public class Ship_tos {
		public String sTrecordID {get;set;} 
		public Integer sTcustNo {get;set;} 
		public Integer sTshipToNo {get;set;} 
		public String sTname {get;set;} 
		public String sTattn {get;set;} 
		public String sTaddr1 {get;set;} 
		public String sTaddr2 {get;set;} 
		public String sTaddr3 {get;set;} 
		public String sTstate {get;set;} 
		public String sTcountry {get;set;} 
		public String sTpostCode {get;set;} 
		public String sTphoneNo {get;set;} 
		public Integer sTsalesman {get;set;} 
		public String sTsalesmanName {get;set;} 
		public Integer sTreg {get;set;} 
		public String sTcontact {get;set;} 
		public String sTtaxCode {get;set;} 
		public String sTwhs {get;set;} 
		public String sTrouteCode {get;set;} 
		public String sTconsCode {get;set;} 
		public String sTConsDesc {get;set;} 
		public String sTdestAreaCode {get;set;} 
		public String sTemail {get;set;} 
		public String sTfaxNo {get;set;} 
		public String sTalphaLookup {get;set;} 
		public List<Notes_Z> notes {get;set;} 
		public String interchangeID {get;set;} 
		public String sourceSystem {get;set;} 

		public Ship_tos(JSONParser parser) {
			System.debug('Ship to parser');
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'sTrecordID') {
							sTrecordID = parser.getText();
						} else if (text == 'sTcustNo') {
							sTcustNo = parser.getIntegerValue();
						} else if (text == 'sTshipToNo') {
							sTshipToNo = parser.getIntegerValue();
						} else if (text == 'sTname') {
							sTname = parser.getText();
						} else if (text == 'sTattn') {
							sTattn = parser.getText();
						} else if (text == 'sTaddr1') {
							sTaddr1 = parser.getText();
						} else if (text == 'sTaddr2') {
							sTaddr2 = parser.getText();
						} else if (text == 'sTaddr3') {
							sTaddr3 = parser.getText();
						} else if (text == 'sTstate') {
							sTstate = parser.getText();
						} else if (text == 'sTcountry') {
							sTcountry = parser.getText();
						} else if (text == 'sTpostCode') {
							sTpostCode = parser.getText();
						} else if (text == 'sTphoneNo') {
							sTphoneNo = parser.getText();
						} else if (text == 'sTsalesman') {
							sTsalesman = parser.getIntegerValue();
						} else if (text == 'sTsalesmanName') {
							sTsalesmanName = parser.getText();
						} else if (text == 'sTreg') {
							sTreg = parser.getIntegerValue();
						} else if (text == 'sTcontact') {
							sTcontact = parser.getText();
						} else if (text == 'sTtaxCode') {
							sTtaxCode = parser.getText();
						} else if (text == 'sTwhs') {
							sTwhs = parser.getText();
						} else if (text == 'sTrouteCode') {
							sTrouteCode = parser.getText();
						} else if (text == 'sTconsCode') {
							sTconsCode = parser.getText();
						} else if (text == 'sTConsDesc') {
							sTConsDesc = parser.getText();
						} else if (text == 'sTdestAreaCode') {
							sTdestAreaCode = parser.getText();
						} else if (text == 'sTemail') {
							sTemail = parser.getText();
						} else if (text == 'sTfaxNo') {
							sTfaxNo = parser.getText();
						} else if (text == 'sTalphaLookup') {
							sTalphaLookup = parser.getText();
						} else if (text == 'notes') {
							notes = arrayOfNotes_Z(parser);
						} else if (text == 'interchangeID') {
							interchangeID = parser.getText();
						} else if (text == 'sourceSystem') {
							sourceSystem = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Ship_tos consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Notes {
		public Integer sNnoteSequence {get;set;} 
		public String sNnoteText {get;set;} 
		public String interchangeID {get;set;} 
		public String sourceSystem {get;set;} 

		public Notes(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'sNnoteSequence') {
							sNnoteSequence = parser.getIntegerValue();
						} else if (text == 'sNnoteText') {
							sNnoteText = parser.getText();
						} else if (text == 'interchangeID') {
							interchangeID = parser.getText();
						} else if (text == 'sourceSystem') {
							sourceSystem = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Notes consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Notes_Z {

		public Notes_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Notes_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public static List<CustomerTemplate> parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return arrayOfCustomerTemplate(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	
	private static List<Notes_Z> arrayOfNotes_Z(System.JSONParser p) {
        List<Notes_Z> res = new List<Notes_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Notes_Z(p));
        }
        return res;
    }
    private static List<Notes> arrayOfNotes(System.JSONParser p) {
        List<Notes> res = new List<Notes>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Notes(p));
        }
        return res;
    }
	private static List<Ship_tos> arrayOfShip_tos(System.JSONParser p) {
        List<Ship_tos> res = new List<Ship_tos>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Ship_tos(p));
        }
		System.debug('OKPARSE');
		for(Ship_tos shipto : res){
			System.debug(shipto);
		}
		System.debug(res.size());
        return res;
    }

    private static List<CustomerTemplate> arrayOfCustomerTemplate(System.JSONParser p) {
        List<CustomerTemplate> res = new List<CustomerTemplate>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new CustomerTemplate(p));
        }
        return res;
    }



}